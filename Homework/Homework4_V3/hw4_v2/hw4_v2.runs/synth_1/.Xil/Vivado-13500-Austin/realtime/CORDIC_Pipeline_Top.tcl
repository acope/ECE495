# 
# Synthesis run script generated by Vivado
# 

namespace eval rt {
    variable rc
}
set rt::rc [catch {
  uplevel #0 {
    set ::env(BUILTIN_SYNTH) true
    source $::env(HRT_TCL_PATH)/rtSynthPrep.tcl
    rt::HARTNDb_resetJobStats
    rt::HARTNDb_startJobStats
    set rt::cmdEcho 0
    rt::set_parameter writeXmsg true
    set ::env(RT_TMP) "./.Xil/Vivado-13500-Austin/realtime/tmp"
    if { [ info exists ::env(RT_TMP) ] } {
      file delete -force $::env(RT_TMP)
      file mkdir $::env(RT_TMP)
    }

    rt::delete_design

    set rt::partid xc7k70tfbv676-1

    set rt::multiChipSynthesisFlow false
    source $::env(SYNTH_COMMON)/common_vhdl.tcl
    set rt::defaultWorkLibName xil_defaultlib

    set rt::useElabCache false
    if {$rt::useElabCache == false} {
      rt::read_vhdl -lib xil_defaultlib {
      C:/Users/mr_co_000/Desktop/hw4_v2/hw4_v2/fulladd.vhd
      C:/Users/mr_co_000/Desktop/hw4_v2/hw4_v2/lpm_pack.vhd
      C:/Users/mr_co_000/Desktop/hw4_v2/hw4_v2/my4to1LUT_atan.vhd
      C:/Users/mr_co_000/Desktop/hw4_v2/hw4_v2/mux_2to1.vhd
      C:/Users/mr_co_000/Desktop/hw4_v2/hw4_v2/my_addsub.vhd
      C:/Users/mr_co_000/Desktop/hw4_v2/hw4_v2/lpm_clshift.vhd
      C:/Users/mr_co_000/Desktop/hw4_v2/hw4_v2/my_rege.vhd
      C:/Users/mr_co_000/Desktop/hw4_v2/hw4_v2/CORDIC_FP_top.vhd
      C:/Users/mr_co_000/Desktop/hw4_v2/hw4_v2/CORDIC_Pipeline_Top.vhd
    }
      rt::filesetChecksum
    }
    rt::set_parameter usePostFindUniquification false
    set rt::top CORDIC_Pipeline_Top
    set rt::reportTiming false
    rt::set_parameter elaborateOnly false
    rt::set_parameter elaborateRtl false
    rt::set_parameter eliminateRedundantBitOperator true
    rt::set_parameter writeBlackboxInterface true
    rt::set_parameter ramStyle auto
    rt::set_parameter merge_flipflops true
    rt::set_parameter webTalkPath {C:/Users/mr_co_000/Desktop/hw4_v2/hw4_v2/hw4_v2.cache/wt}
    rt::set_parameter enableSplitFlowPath "./.Xil/Vivado-13500-Austin/"
    if {$rt::useElabCache == false} {
      rt::run_synthesis -module $rt::top
    }

    set rt::flowresult [ source $::env(SYNTH_COMMON)/flow.tcl ]
    rt::HARTNDb_stopJobStats
    rt::HARTNDb_reportJobStats "Synthesis Optimization Runtime"
    if { $rt::flowresult == 1 } { return -code error }

    if { [ info exists ::env(RT_TMP) ] } {
      file delete -force $::env(RT_TMP)
    }


    source $::env(HRT_TCL_PATH)/rtSynthCleanup.tcl
  } ; #end uplevel
} rt::result]

if { $rt::rc } {
  $rt::db resetHdlParse
  source $::env(HRT_TCL_PATH)/rtSynthCleanup.tcl
  return -code "error" $rt::result
}
